# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python [3.7,3.8,3.9,3.10,3.11,3.12] MacOs

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  BEZIER_NO_EXTENSION: true
  OPENBLAS_NUM_THREADS: 1 
  MKL_NUM_THREADS : 1

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        python-version: [3.7, 3.8, 3.9, '3.10', '3.11','3.12']
        # Proposed workaround for legacy versions, see
        # https://github.com/actions/setup-python/issues/856 and
        # https://github.com/actions/runner-images/issues/9770#issuecomment-2085623315
        exclude:  # Python < v3.8 does not support Apple Silicon ARM64.
          - python-version: "3.7"
            os: macos-latest
        include:  # So run those legacy versions on Intel CPUs.
          - python-version: "3.7"
            os: macos-13

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov pytest-xdist
    - name: Install package Python lt 3.12
      if: matrix.python-version != '3.12' 
      run: |
        pip install --upgrade pip
        pip install --upgrade setuptools
        pip install -e .
        pip freeze
    - name: Install package Python eq 3.12
      if: matrix.python-version == '3.12' 
      run: |
        pip install --upgrade pip
        pip install --upgrade setuptools
        pip install bezier
        pip install mdtraj --use-deprecated=legacy-resolver
        pip install -e . --use-deprecated=legacy-resolver
        pip freeze
    - name: Test with pytest and coverage macos
      continue-on-error: true
      run: |
        echo -e '[run]\nomit = *dihedrals.py,*contact_matrix.py' > .coveragerc
        pytest -vs --cov=./ --cov-report=xml --disable-warnings --cov-config=.coveragerc
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        #directory: ./coverage/reports/
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: true
        #path_to_write_report: ./coverage/codecov_report.gz

